% ==============================
% Credentials Obfuscation schema
% ==============================

{mapping, "credentials_obfuscation.enabled", "credentials_obfuscation.enabled",
   [{datatype, {enum, [true, false]}},
    {include_default, true}
   ]}.

{mapping, "credentials_obfuscation.cipher", "credentials_obfuscation.cipher",
   [{datatype, atom},
    {include_default, aes_128_cbc}
   ]}.

{translation, "credentials_obfuscation.cipher",
fun(Conf) ->
    Setting = cuttlefish:conf_get("credentials_obfuscation.cipher", Conf),
    case
        lists:member(Setting,
                     credentials_obfuscation_pbe:supported_ciphers())
    of
        true ->
            Setting;
        false ->
            cuttlefish:invalid("Invalid cipher")
    end
end}.


{mapping, "credentials_obfuscation.hash", "credentials_obfuscation.hash",
   [{datatype, atom},
    {include_default, sha256}
   ]}.

{translation, "credentials_obfuscation.hash",
fun(Conf) ->
    Setting = cuttlefish:conf_get("credentials_obfuscation.hash", Conf),
    case
        lists:member(Setting,
                     credentials_obfuscation_pbe:supported_hashes())
    of
        true ->
            Setting;
        false ->
            cuttlefish:invalid("Invalid hash")
    end
end}.

{mapping, "credentials_obfuscation.iterations", "credentials_obfuscation.iterations",
   [{datatype, integer}, {validators, ["non_zero_positive_integer"]},
    {include_default, 1}
   ]}.

{validator, "non_zero_positive_integer", "number should be greater or equal to one",
fun(Int) when is_integer(Int) ->
    Int >= 1
end}.
